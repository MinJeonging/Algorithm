# 17944 퐁당퐁당 1

"""

#### 문제 설명
- 1. 1번 사람부터 N번 사람까지 순서대로 총 N명의 사람들이 원 모양을 이루어 반시계방향으로 둘러앉는다. 
- 2. 게임은 1번 사람의 왼팔부터 시작하여 원의 바깥에서 보았을 때 왼쪽에서 오른쪽으로 진행한다. 
- 3. 첫 번째 차례 이후 매 차례마다 가장 오른쪽 사람이 들었던 팔의 다음 팔부터 진행하고, 순서대로 지정된 수만큼의 팔을 들어올린다.
- 4. 게임을 시작할 때 들어야 하는 팔의 갯수는 1개이다. 시작하여 차례가 지날 때마다 들어야 하는팔의 개수는 1씩 증가한다.
- 5. 들어야 하는 팔의 갯수가 2 × N 개가 되었다면 다음 차례부터 1씩 감소시킨다.
- 6. 들어야 하는 팔의 갯수가 1개가 되었다면 다음 차례부터 다시 1씩 증가시킨다. 즉, 매 차례에 들어야 할 팔의 갯수는 1 이상 2 × N 이하로 유지된다.
- 해당 차례에서 사람들이 들어야 하는 팔의 개수를 구하는 문제이다.

---

### 풀이 방법
1. 규칙이 있음 -> 직접 시뮬레이션할 필요는 없음.
2. 나눗셈 계산으로 해결 가능
3. T를 4N - 2로 나눈 나머지가 2N보다 작은 경우 나머지 자체가 정답. 아닐 경우 2 * N - (ans - 2 * N)

"""

# 입력 처리
N, T = map(int, input().split())

# 주기 길이 (4N - 2)
cycle_length = 4 * N - 2

# 현재 차례를 주기로 나눈 나머지 계산
current = T % cycle_length

# 나머지가 0이면 주기의 마지막 값
if current == 0:
    current = cycle_length

# 결과 계산
if current <= 2 * N:  # 증가하는 구간
    result = current
else:  # 감소하는 구간
    result = 2 * N - (current - 2 * N)

print(result)